package fv.util;

import java.beans.PropertyDescriptor;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Id;
import javax.persistence.IdClass;
import org.apache.commons.beanutils.PropertyUtils;

/**
 * Domain class utils. Domain class must be generated by dogen 
 * @author Hieu
 * 
 */
public class CustomDomainUtils {
	public static Map<String, String> getHeaderColumnMap(Class<?> domainClass) {
		Map<String, String> columns = new HashMap<String, String>();
		IdClass idClazz = domainClass.getAnnotation(IdClass.class);
		if (idClazz != null) {
			Class<?> clazz = idClazz.value();
			PropertyDescriptor[] pd = PropertyUtils
					.getPropertyDescriptors(clazz);
			for (PropertyDescriptor p : pd) {
				String pn = p.getName();
				Method m = p.getReadMethod();
				Column col = m.getAnnotation(Column.class);
				if (col != null) {
					columns.put(col.name(), pn);
				}
			}
		}
		PropertyDescriptor[] pd = PropertyUtils
				.getPropertyDescriptors(domainClass);
		for (PropertyDescriptor p : pd) {
			String pn = p.getName();
			Method m = p.getReadMethod();
			Column col = m.getAnnotation(Column.class);
			if (col != null) {
				columns.put(col.name(), pn);
			}
		}
		return columns;
	}

	public static Map<String, String> getHeaderColumnMap(Class<?> domainClass,
			String[] fields) throws NoSuchFieldException {
		Map<String, String> columns = new HashMap<String, String>();
		for (String str : fields) {
			IdClass idClazz = domainClass.getAnnotation(IdClass.class);
			if (idClazz != null) {
				Class<?> clazz = idClazz.value();
				PropertyDescriptor[] pd = PropertyUtils
						.getPropertyDescriptors(clazz);
				boolean hasFoundInId = false;
				for (PropertyDescriptor p : pd) {
					String pn = p.getName();
					Method m = p.getReadMethod();
					Column col = m.getAnnotation(Column.class);
					if (col != null) {
						if (col.name().equals(str)) {
							columns.put(col.name(), pn);
							hasFoundInId = true;
							break;
						}
					}
				}
				if (hasFoundInId)
					continue;
			}
			boolean found = false;
			PropertyDescriptor[] pd = PropertyUtils
					.getPropertyDescriptors(domainClass);
			for (PropertyDescriptor p : pd) {
				Method m = p.getReadMethod();
				Column col = m.getAnnotation(Column.class);
				if (col != null) {
					if (col.name().equals(str)) {
						columns.put(str, p.getName());
						found = true;
						break;
					}
				}
			}
			if (!found)
				throw new NoSuchFieldException();
		}
		return columns;
	}
	
	public static Map<String, Object> getIdValues(Object entity){
		Map<String, Object> map = new HashMap<String, Object>();//id column - value
		Class<?> c = entity.getClass();
		IdClass idClazz = c.getAnnotation(IdClass.class);
		if (idClazz!=null){
			Class<?> clazz = idClazz.value();
			PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
			for (PropertyDescriptor p : pd) {
				String pn = p.getName();
				Method m = p.getReadMethod();
				Column col = m.getAnnotation(Column.class);
				if (col != null) {
					try {
						map.put(pn, PropertyUtils.getProperty(entity, pn));
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					}
				}
			}
		}else{//use this block code only is possible
			Class<?> clazz = entity.getClass();
			PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
			for (PropertyDescriptor p : pd) {
				String pn = p.getName();
				Method m = p.getReadMethod();
				Id id = m.getAnnotation(Id.class);
				Column col = m.getAnnotation(Column.class);
				if (id!=null&&col!=null){
					try {
						map.put(col.name(), PropertyUtils.getProperty(entity, pn));
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					}
				}
			}
		}
		return map;
	}
	
	public static Map<String, Object> getIdValues(Object entity, Serializable pk){
		Map<String, Object> map = new HashMap<String, Object>();//id column - value
		Class<?> clazz = pk.getClass();		
		Embeddable pka = clazz.getAnnotation(Embeddable.class);
		
		if (pka==null) {
			Class<?> c;
			if (entity instanceof Class){
				c = (Class<?>) entity;
			}else {
				c = entity.getClass();
			}
			PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(c);
			for (PropertyDescriptor p : pd) {
				Method m = p.getReadMethod();
				Column col = m.getAnnotation(Column.class);
				Id id = m.getAnnotation(Id.class);
				if (id!=null){
					map.put(col.name(), pk);
					break;
				}
			}
		}else{
			PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
			for (PropertyDescriptor p : pd) {
				String pn = p.getName();
				Method m = p.getReadMethod();
				Column col = m.getAnnotation(Column.class);
//				Id id = m.getAnnotation(Id.class);
				if (col!=null){
					try {
						map.put(col.name(), PropertyUtils.getProperty(pk, pn));
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					}
				}
			}			
		}
		return map;
	}
	
	/**
	 * fieldName-columnName
	 * @param entity
	 * @return 
	 */
	//FIXME - @Column required
	public static Map<String, String> info(Object entity){
		Map<String, String> map = new HashMap<String, String>();
		Class<?> clazz;
		if (entity instanceof Class){
			clazz = (Class<?>) entity;
		}else {
			clazz = entity.getClass();
		}
//		Table table = clazz.getAnnotation(Table.class);
//		if (table!=null) map.put("table", table.name());
		PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
		for (PropertyDescriptor p : pd) {
			String pn = p.getName();
			Method m = p.getReadMethod();
			Column col = m.getAnnotation(Column.class);
			if (col!=null){
				map.put(pn, col.name());
			}
		}
		return map;
	}
	
	public static Map<String, Object> compareDO(Object src, Object des){
		Class<?> clazz = src.getClass();
		Class<?> clazz1 = des.getClass();
		if (!clazz.getName().equals(clazz1.getName())) return null;
		
		Map<String, Object> map = new HashMap<String, Object>();
		PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
		for (PropertyDescriptor p : pd) {
			String pn = p.getName();
			Method m = p.getReadMethod();
			Column col = m.getAnnotation(Column.class);
			if (col!=null){
				try {
					Object value1 = PropertyUtils.getProperty(src, pn);
					Object value2 = PropertyUtils.getProperty(des, pn);
					if (value1 instanceof Date&&value2 instanceof Date){
						if (((Date)value1).compareTo((Date)value2)!=0){
							map.put(col.name(), value2);
						}
					}else if (value1!=null&&value2!=null&&!value1.equals(value2)||value1==null&&value2!=null||value1!=null&&value2==null){
						map.put(col.name(), value2);
					}
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				}
			}
		}
		return map;
	}
	
	public static Object[] getPKColumns(Class clazz){
		PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(clazz);
		ArrayList<String> list = new ArrayList<String>();
		for (PropertyDescriptor p : pd) {
			String pn = p.getName();
			Method m = p.getReadMethod();
//			Column col = m.getAnnotation(Column.class);
			Id id = m.getAnnotation(Id.class);
			if (id!=null){
				list.add(pn);
			}
		}
		return list.toArray();
	}
	
	public static String[] getMappedColumns(String[] props, Class clazz){
		String[] cols = new String[props.length];
		Map<String, String> info = info(clazz);
		for (int i=0;i<props.length;i++){
			cols[i]=info.get(props[i]);
		}
		return cols;
	}
}
