package fv.components;

import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import nextapp.echo2.app.Border;
import nextapp.echo2.app.Color;
import nextapp.echo2.app.ContentPane;
import nextapp.echo2.app.Extent;
import nextapp.echo2.app.SplitPane;
import nextapp.echo2.app.event.ActionEvent;
import nextapp.echo2.app.event.ActionListener;
import nextapp.echo2.app.list.ListSelectionModel;
import nextapp.echo2.app.table.DefaultTableColumnModel;
import nextapp.echo2.app.table.TableColumnModel;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.ArrayUtils;
import dsc.echo2app.component.DscPageNavigator;
import dsc.echo2app.component.table.DscPageableSortableTable;
import dsc.echo2app.component.table.PageableSortableTableModel;
import echopointng.table.SortableTableColumn;
import fv.util.BundleUtils;
import fv.util.Vni2Uni;

/**
 * Dynamic object data table, domain class generated by dogen.exe may be not
 * implemented correctly, try to find JdbcBrowserContent to solve this.<br/>
 * <b>Mr. Bean:</b> zzzzzzz
 * 
 * @author Hieu
 * @since 14/07/2011
 */
public abstract class MrBeanBrowserContent extends ContentPane {
	private static final long serialVersionUID = 1L;

	private DscPageableSortableTable dataTable;

	private static final Comparator<Object> COMPARATOR = new BeanTableComparator();

	private Map<String, String> columnHeaderMap;// bean.field <> uicaption.key

	private String[] tableHeader;// display field

	private String[] vniColumns;

	private SplitPane splitPane;

	private DscPageNavigator navigator;

	private BeanSortableTableModel model;

	private List<?> listData;
	
	private int rowsPerPage=20;

	public MrBeanBrowserContent() {
		super();
		this.columnHeaderMap = getColumnHeaderMap();
		initComponents();
	}

	public String[] getTableHeader() {
		return this.tableHeader;
	}

	public abstract Class<?> getBean();

	public abstract Map<String, String> getColumnHeaderMap();

	public void setVniColumns(String[] vniColumns) {
		this.vniColumns = vniColumns;
	}

	public void initTableColumns(String[] tableHeader) {
		this.tableHeader = tableHeader;
		TableColumnModel columnModel = new DefaultTableColumnModel();
		for (int i = 0; i < tableHeader.length; i++) {
			SortableTableColumn column = new SortableTableColumn(i);
			column.setHeaderRenderer(dataTable.getDefaultHeaderRenderer());
			column.setComparator(COMPARATOR);
			column.setModelIndex(i);
			column.setHeaderValue(getColumnHeader(tableHeader[i]));
			columnModel.addColumn(column);
		}
		dataTable.setColumnModel(columnModel);
		model = new BeanSortableTableModel(columnModel);
		ListSelectionModel smodel = dataTable.getSelectionModel();
		model.setSelectionModel(smodel);
		dataTable.setModel(model);
		dataTable.setSelectionEnabled(true);
		dataTable.addActionListener(new ActionListener() {
			private static final long serialVersionUID = 1L;

			private int rowNo;

			@Override
			public void actionPerformed(ActionEvent e) {
				rowNo = dataTable.getSelectionModel().getMaxSelectedIndex();
				model.setSelectedIndex(rowNo);
			}
		});
		navigator.setTable(dataTable);
	}

	/**
	 * Find a caption for bean.field
	 * 
	 * @param beanField
	 * @return
	 */
	public String getColumnHeader(String beanField) {
		String captionKey = columnHeaderMap.get(beanField);
		return BundleUtils.getString(captionKey);
	}

	protected void bindData() {
		PageableSortableTableModel model = (PageableSortableTableModel) dataTable
				.getModel();
		model.clear();
		if (listData != null) {
			for (int i = 0; i < listData.size(); i++) {
				for (int j = 0; j < tableHeader.length; j++) {
					String header = tableHeader[j];
					try {
						Object obj = PropertyUtils.getProperty(listData.get(i),
								header);
						if (obj instanceof java.util.Date) {
							obj = new SimpleDateFormat("dd/MM/yyyy")
									.format(obj);
						}
						if (vniColumns != null && vniColumns.length != 0)
							if (ArrayUtils.contains(vniColumns, header)&&obj!=null) {
								obj = Vni2Uni.convertToUnicode(obj.toString());
							}
						model.setValueAt(obj, j, i);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					}
				}
			}
		}
		navigator.setRowsPerPage(rowsPerPage);
		dataTable.getSelectionModel().setSelectedIndex(0, true);
		navigator.reset();
	}

	private void initComponents() {
		splitPane = new SplitPane(SplitPane.ORIENTATION_VERTICAL_TOP_BOTTOM);
		splitPane.setSeparatorPosition(new Extent(30));
		add(splitPane);
		
		dataTable = new DscPageableSortableTable();
		dataTable.setRolloverEnabled(false);
		dataTable.setAutoCreateColumnsFromModel(false);
		dataTable.setStyleName("Table.DscPageableSortableTable");
		
		navigator = new DscPageNavigator(dataTable, 20);
		navigator.setBackground(new Color(0xc0c0c0));
		navigator.setBorder(new Border(new Extent(2, Extent.PX), Color.WHITE,
				Border.STYLE_GROOVE));
		splitPane.add(navigator);
		
		splitPane.add(dataTable);
	}

	public List<?> getListData() {
		return listData;
	}

	public void setListData(List<?> listData) {
		this.listData = listData;
	}

	public void refresh() {
		doDataContentRefresh();
		bindData();
	}

	public void doDataContentRefresh() {

	}
	
	public void setRowsPerPage(int rows){
		this.rowsPerPage=rows;
	}
	
	public DscPageableSortableTable getDataTable(){
		return dataTable;
	}

	public DscPageNavigator getNavigator() {
		return navigator;
	}
}
